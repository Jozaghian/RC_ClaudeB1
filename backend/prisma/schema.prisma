// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  DRIVER
  PASSENGER
  ADMIN
}

enum UserStatus {
  ACTIVE
  PENDING_VERIFICATION
  SUSPENDED
  BANNED
}

enum VerificationStatus {
  PENDING
  VERIFIED
  REJECTED
}

enum RideStatus {
  ACTIVE
  COMPLETED
  CANCELLED
  EXPIRED
}

enum BookingStatus {
  PENDING
  CONFIRMED
  CANCELLED
  COMPLETED
}

enum RequestStatus {
  OPEN
  CLOSED
  EXPIRED
}

enum BidStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

enum PaymentMethod {
  CASH
  E_TRANSFER
  CREDIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  REFUNDED
}

enum TripType {
  SINGLE
  RETURN
  RECURRING
}

enum RecurrencePattern {
  DAILY
  WEEKLY
  MONTHLY
}

enum VehicleType {
  SEDAN
  SUV
  VAN
  TRUCK
  COUPE
  HATCHBACK
}

enum SupportPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id                String              @id @default(uuid())
  email             String              @unique
  phoneNumber       String              @unique @map("phone_number")
  password          String
  firstName         String              @map("first_name")
  lastName          String              @map("last_name")
  dateOfBirth       DateTime?           @map("date_of_birth")
  role              UserRole            @default(PASSENGER)
  status            UserStatus          @default(PENDING_VERIFICATION)
  
  // Profile information
  profilePicture    String?             @map("profile_picture")
  bio               String?
  languages         String[]            @default([])
  
  // Verification
  phoneVerified     Boolean             @default(false) @map("phone_verified")
  emailVerified     Boolean             @default(false) @map("email_verified")
  identityVerified  Boolean             @default(false) @map("identity_verified")
  verificationCode  String?             @map("verification_code")
  verificationExpiry DateTime?          @map("verification_expiry")

  // Password reset
  passwordResetToken String?            @map("password_reset_token")
  passwordResetExpiry DateTime?         @map("password_reset_expiry")
  
  // Driver specific
  licenseNumber     String?             @map("license_number")
  licenseExpiry     DateTime?           @map("license_expiry")
  licensePhoto      String?             @map("license_photo")
  
  // Ratings
  driverRating      Float?              @default(0.0) @map("driver_rating")
  passengerRating   Float?              @default(0.0) @map("passenger_rating")
  totalTripsAsDriver Int                @default(0) @map("total_trips_as_driver")
  totalTripsAsPassenger Int             @default(0) @map("total_trips_as_passenger")
  
  // Preferences
  preferences       Json?               @default("{}")
  notificationSettings Json?            @default("{}") @map("notification_settings")
  
  // Timestamps
  createdAt         DateTime            @default(now()) @map("created_at")
  updatedAt         DateTime            @updatedAt @map("updated_at")
  lastLoginAt       DateTime?           @map("last_login_at")
  
  // Relations
  vehicles          Vehicle[]
  ridesAsDriver     Ride[]              @relation("DriverRides")
  bookingsAsPassenger Booking[]         @relation("PassengerBookings")
  rideRequests      RideRequest[]
  bidsAsDriver      Bid[]               @relation("DriverBids")
  sentRatings       Rating[]            @relation("RatingFrom")
  receivedRatings   Rating[]            @relation("RatingTo")
  driverCredits     DriverCredit[]
  supportTickets    SupportTicket[]
  sentMessages      Message[]           @relation("MessageSender")
  receivedMessages  Message[]           @relation("MessageReceiver")
  tripSchedules     TripSchedule[]
  
  @@map("users")
}

model Vehicle {
  id              String      @id @default(uuid())
  userId          String      @map("user_id")
  makeId          String      @map("make_id")
  modelId         String      @map("model_id")
  year            Int
  color           String
  licensePlate    String      @map("license_plate")
  type            VehicleType
  seats           Int
  isActive        Boolean     @default(true) @map("is_active")
  
  // Additional details
  features        String[]    @default([])
  photos          String[]    @default([])
  
  createdAt       DateTime    @default(now()) @map("created_at")
  updatedAt       DateTime    @updatedAt @map("updated_at")
  
  // Relations
  user            User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  make            VehicleMake @relation(fields: [makeId], references: [id])
  model           VehicleModel @relation(fields: [modelId], references: [id])
  rides           Ride[]
  tripSchedules   TripSchedule[]
  
  @@map("vehicles")
}

model VehicleMake {
  id        String         @id @default(uuid())
  name      String         @unique
  isActive  Boolean        @default(true) @map("is_active")
  createdAt DateTime       @default(now()) @map("created_at")
  
  // Relations
  models    VehicleModel[]
  vehicles  Vehicle[]
  
  @@map("vehicle_makes")
}

model VehicleModel {
  id            String      @id @default(uuid())
  makeId        String      @map("make_id")
  name          String
  type          VehicleType
  defaultSeats  Int         @default(5) @map("default_seats")
  isActive      Boolean     @default(true) @map("is_active")
  createdAt     DateTime    @default(now()) @map("created_at")
  
  // Relations
  make          VehicleMake @relation(fields: [makeId], references: [id])
  vehicles      Vehicle[]
  
  @@unique([makeId, name])
  @@map("vehicle_models")
}

model City {
  id          String    @id @default(uuid())
  name        String
  province    String
  country     String    @default("Canada")
  latitude    Float
  longitude   Float
  isActive    Boolean   @default(true) @map("is_active")
  createdAt   DateTime  @default(now()) @map("created_at")
  
  // Relations
  ridesOrigin Ride[]    @relation("OriginCity")
  ridesDestination Ride[] @relation("DestinationCity")
  requestsOrigin RideRequest[] @relation("RequestOriginCity")
  requestsDestination RideRequest[] @relation("RequestDestinationCity")
  scheduleOrigin TripSchedule[] @relation("ScheduleOriginCity")
  scheduleDestination TripSchedule[] @relation("ScheduleDestinationCity")
  
  @@unique([name, province, country])
  @@map("cities")
}

model Ride {
  id                  String      @id @default(uuid())
  driverId            String      @map("driver_id")
  vehicleId           String      @map("vehicle_id")
  
  // Route information
  originCityId        String      @map("origin_city_id")
  destinationCityId   String      @map("destination_city_id")
  originDetails       String?     @map("origin_details")
  destinationDetails  String?     @map("destination_details")
  
  // Schedule
  departureDateTime   DateTime    @map("departure_datetime")
  estimatedDuration   Int?        @map("estimated_duration") // in minutes
  
  // Capacity and pricing
  totalSeats          Int         @map("total_seats")
  availableSeats      Int         @map("available_seats")
  pricePerPerson      Float       @map("price_per_person")
  currency            String      @default("CAD")
  
  // Trip conditions
  allowsLargeLuggage  Boolean     @default(false) @map("allows_large_luggage")
  allowsPets          Boolean     @default(false) @map("allows_pets")
  allowsSmoking       Boolean     @default(false) @map("allows_smoking")
  
  // Additional information
  additionalNotes     String?     @map("additional_notes")
  status              RideStatus  @default(ACTIVE)
  
  // Trip type and scheduling
  tripType            TripType    @default(SINGLE) @map("trip_type")
  tripScheduleId      String?     @map("trip_schedule_id")
  
  // Return trip information
  returnDateTime      DateTime?   @map("return_datetime")
  returnNotes         String?     @map("return_notes")
  returnRideId        String?     @unique @map("return_ride_id")
  isReturnTrip        Boolean     @default(false) @map("is_return_trip")
  
  // Legacy recurring support (keep for backward compatibility)
  isRecurring         Boolean     @default(false) @map("is_recurring")
  recurringPattern    String?     @map("recurring_pattern")
  parentRideId        String?     @map("parent_ride_id")
  
  createdAt           DateTime    @default(now()) @map("created_at")
  updatedAt           DateTime    @updatedAt @map("updated_at")
  
  // Relations
  driver              User        @relation("DriverRides", fields: [driverId], references: [id])
  vehicle             Vehicle     @relation(fields: [vehicleId], references: [id])
  originCity          City        @relation("OriginCity", fields: [originCityId], references: [id])
  destinationCity     City        @relation("DestinationCity", fields: [destinationCityId], references: [id])
  bookings            Booking[]
  parentRide          Ride?       @relation("RideFamily", fields: [parentRideId], references: [id])
  childRides          Ride[]      @relation("RideFamily")
  tripSchedule        TripSchedule? @relation(fields: [tripScheduleId], references: [id])
  returnTrip          Ride?       @relation("ReturnTrip", fields: [returnRideId], references: [id])
  originalTrip        Ride?       @relation("ReturnTrip")
  
  @@map("rides")
}

model TripSchedule {
  id                  String            @id @default(uuid())
  driverId            String            @map("driver_id")
  
  // Template information
  name                String            // e.g., "Work Commute", "Weekly Ottawa Trip"
  description         String?
  
  // Route template
  originCityId        String            @map("origin_city_id")
  destinationCityId   String            @map("destination_city_id")
  originDetails       String?           @map("origin_details")
  destinationDetails  String?           @map("destination_details")
  
  // Default trip settings
  vehicleId           String            @map("vehicle_id")
  totalSeats          Int               @map("total_seats")
  pricePerPerson      Float             @map("price_per_person")
  currency            String            @default("CAD")
  
  // Trip conditions
  allowsLargeLuggage  Boolean           @default(false) @map("allows_large_luggage")
  allowsPets          Boolean           @default(false) @map("allows_pets")
  allowsSmoking       Boolean           @default(false) @map("allows_smoking")
  additionalNotes     String?           @map("additional_notes")
  
  // Recurrence settings
  recurrencePattern   RecurrencePattern @map("recurrence_pattern")
  recurrenceInterval  Int               @default(1) @map("recurrence_interval") // every X weeks/months
  
  // Days of week for weekly recurrence (0=Sunday, 6=Saturday)
  daysOfWeek          Int[]             @default([]) @map("days_of_week")
  
  // Monthly recurrence day (1-31)
  dayOfMonth          Int?              @map("day_of_month")
  
  // Default time for recurring trips
  defaultTime         String            @map("default_time") // HH:MM format
  
  // Schedule boundaries
  startDate           DateTime          @map("start_date")
  endDate             DateTime?         @map("end_date")
  
  // Status
  isActive            Boolean           @default(true) @map("is_active")
  
  // Selected dates for manual recurring trips
  selectedDates       DateTime[]        @default([]) @map("selected_dates")
  
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  
  // Relations
  driver              User              @relation(fields: [driverId], references: [id])
  vehicle             Vehicle           @relation(fields: [vehicleId], references: [id])
  originCity          City              @relation("ScheduleOriginCity", fields: [originCityId], references: [id])
  destinationCity     City              @relation("ScheduleDestinationCity", fields: [destinationCityId], references: [id])
  rides               Ride[]
  
  @@map("trip_schedules")
}

model Booking {
  id              String        @id @default(uuid())
  rideId          String        @map("ride_id")
  passengerId     String        @map("passenger_id")
  
  seatsBooked     Int           @default(1) @map("seats_booked")
  totalAmount     Float         @map("total_amount")
  currency        String        @default("CAD")
  
  paymentMethod   PaymentMethod @map("payment_method")
  paymentStatus   PaymentStatus @default(PENDING) @map("payment_status")
  
  status          BookingStatus @default(PENDING)
  
  // Special requirements
  specialRequests String?       @map("special_requests")
  
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")
  
  // Relations
  ride            Ride          @relation(fields: [rideId], references: [id])
  passenger       User          @relation("PassengerBookings", fields: [passengerId], references: [id])
  payment         Payment?
  
  @@map("bookings")
}

model RideRequest {
  id                    String        @id @default(uuid())
  passengerId           String        @map("passenger_id")
  
  // Route information
  originCityId          String        @map("origin_city_id")
  destinationCityId     String        @map("destination_city_id")
  originDetails         String?       @map("origin_details")
  destinationDetails    String?       @map("destination_details")
  
  // Schedule preferences
  preferredDateTime     DateTime      @map("preferred_datetime")
  timeFlexibility       Int           @default(0) @map("time_flexibility") // in hours
  
  // Trip details
  passengerCount        Int           @default(1) @map("passenger_count")
  maxBudget             Float?        @map("max_budget")
  minBudget             Float?        @map("min_budget")
  currency              String        @default("CAD")
  
  // Special requirements
  needsLargeLuggage     Boolean       @default(false) @map("needs_large_luggage")
  needsChildSeat        Boolean       @default(false) @map("needs_child_seat")
  needsWheelchairAccess Boolean       @default(false) @map("needs_wheelchair_access")
  specialRequirements   String?       @map("special_requirements")
  
  // Request details
  description           String?
  status                RequestStatus @default(OPEN)
  expiresAt             DateTime      @map("expires_at")
  
  createdAt             DateTime      @default(now()) @map("created_at")
  updatedAt             DateTime      @updatedAt @map("updated_at")
  
  // Relations
  passenger             User          @relation(fields: [passengerId], references: [id])
  originCity            City          @relation("RequestOriginCity", fields: [originCityId], references: [id])
  destinationCity       City          @relation("RequestDestinationCity", fields: [destinationCityId], references: [id])
  bids                  Bid[]
  
  @@map("ride_requests")
}

model Bid {
  id              String     @id @default(uuid())
  requestId       String     @map("request_id")
  driverId        String     @map("driver_id")
  
  priceOffer      Float      @map("price_offer")
  currency        String     @default("CAD")
  
  proposedDateTime DateTime?  @map("proposed_datetime")
  message         String?
  
  status          BidStatus  @default(PENDING)
  expiresAt       DateTime   @map("expires_at")
  
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")
  
  // Relations
  request         RideRequest @relation(fields: [requestId], references: [id])
  driver          User       @relation("DriverBids", fields: [driverId], references: [id])
  
  @@unique([requestId, driverId])
  @@map("bids")
}

model CreditPackage {
  id                  String    @id @default(uuid())
  name                String
  rideCount           Int       @map("ride_count")
  price               Float
  currency            String    @default("CAD")
  discountPercentage  Float     @default(0.0) @map("discount_percentage")
  
  isActive            Boolean   @default(true) @map("is_active")
  isPopular           Boolean   @default(false) @map("is_popular")
  displayOrder        Int       @default(0) @map("display_order")
  
  description         String?
  
  createdAt           DateTime  @default(now()) @map("created_at")
  updatedAt           DateTime  @updatedAt @map("updated_at")
  
  // Relations
  purchases           DriverCredit[]
  
  @@map("credit_packages")
}

model DriverCredit {
  id                String        @id @default(uuid())
  driverId          String        @map("driver_id")
  packageId         String        @map("package_id")
  
  creditsPurchased  Int           @map("credits_purchased")
  creditsRemaining  Int           @map("credits_remaining")
  amountPaid        Float         @map("amount_paid")
  currency          String        @default("CAD")
  
  purchasedAt       DateTime      @default(now()) @map("purchased_at")
  expiresAt         DateTime?     @map("expires_at")
  
  // Relations
  driver            User          @relation(fields: [driverId], references: [id])
  package           CreditPackage @relation(fields: [packageId], references: [id])
  transactions      CreditTransaction[]
  payment           Payment?
  
  @@map("driver_credits")
}

model CreditTransaction {
  id              String       @id @default(uuid())
  creditId        String       @map("credit_id")
  rideId          String?      @map("ride_id")
  
  creditsUsed     Int          @default(1) @map("credits_used")
  transactionType String       @map("transaction_type") // 'ride_post', 'refund'
  description     String?
  
  createdAt       DateTime     @default(now()) @map("created_at")
  
  // Relations
  credit          DriverCredit @relation(fields: [creditId], references: [id])
  
  @@map("credit_transactions")
}

model Payment {
  id                String        @id @default(uuid())
  
  // Payment details
  amount            Float
  currency          String        @default("CAD")
  paymentMethod     PaymentMethod @map("payment_method")
  status            PaymentStatus @default(PENDING)
  
  // Stripe integration
  stripePaymentId   String?       @map("stripe_payment_id")
  stripeCustomerId  String?       @map("stripe_customer_id")
  
  // Relations (one of these will be set)
  bookingId         String?       @unique @map("booking_id")
  creditPurchaseId  String?       @unique @map("credit_purchase_id")
  
  // Metadata
  metadata          Json?         @default("{}")
  
  createdAt         DateTime      @default(now()) @map("created_at")
  updatedAt         DateTime      @updatedAt @map("updated_at")
  completedAt       DateTime?     @map("completed_at")
  
  // Relations
  booking           Booking?      @relation(fields: [bookingId], references: [id])
  creditPurchase    DriverCredit? @relation(fields: [creditPurchaseId], references: [id])
  
  @@map("payments")
}

model Rating {
  id          String   @id @default(uuid())
  fromUserId  String   @map("from_user_id")
  toUserId    String   @map("to_user_id")
  
  // This could be related to a booking, but keeping flexible for future
  entityType  String   @map("entity_type") // 'booking', 'request_bid'
  entityId    String   @map("entity_id")
  
  rating      Int      // 1-5 stars
  review      String?
  
  // Quick feedback categories
  onTime      Boolean? @map("on_time")
  friendly    Boolean?
  clean       Boolean?
  safe        Boolean?
  
  createdAt   DateTime @default(now()) @map("created_at")
  
  // Relations
  fromUser    User     @relation("RatingFrom", fields: [fromUserId], references: [id])
  toUser      User     @relation("RatingTo", fields: [toUserId], references: [id])
  
  @@unique([fromUserId, toUserId, entityType, entityId])
  @@map("ratings")
}

model Notification {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  
  title     String
  message   String
  type      String   // 'booking', 'payment', 'rating', 'system'
  
  isRead    Boolean  @default(false) @map("is_read")
  
  // Optional data payload
  data      Json?    @default("{}")
  
  createdAt DateTime @default(now()) @map("created_at")
  readAt    DateTime? @map("read_at")
  
  @@map("notifications")
}

model Message {
  id           String   @id @default(uuid())
  senderId     String   @map("sender_id")
  receiverId   String   @map("receiver_id")
  
  // Context (booking, request, etc.)
  contextType  String?  @map("context_type")
  contextId    String?  @map("context_id")
  
  content      String
  isRead       Boolean  @default(false) @map("is_read")
  
  createdAt    DateTime @default(now()) @map("created_at")
  readAt       DateTime? @map("read_at")
  
  // Relations
  sender       User     @relation("MessageSender", fields: [senderId], references: [id])
  receiver     User     @relation("MessageReceiver", fields: [receiverId], references: [id])
  
  @@map("messages")
}

model SupportTicket {
  id              String          @id @default(uuid())
  userId          String?         @map("user_id")
  
  subject         String
  message         String
  priority        SupportPriority @default(MEDIUM)
  status          SupportStatus   @default(OPEN)
  
  assignedAdminId String?         @map("assigned_admin_id")
  
  createdAt       DateTime        @default(now()) @map("created_at")
  updatedAt       DateTime        @updatedAt @map("updated_at")
  resolvedAt      DateTime?       @map("resolved_at")
  
  // Relations
  user            User?           @relation(fields: [userId], references: [id])
  
  @@map("support_tickets")
}

model SystemSetting {
  id           String   @id @default(uuid())
  key          String   @unique
  value        String
  type         String   // 'string', 'number', 'boolean', 'decimal', 'json'
  description  String?
  
  updatedBy    String?  @map("updated_by")
  updatedAt    DateTime @updatedAt @map("updated_at")
  
  @@map("system_settings")
}

model ContentPage {
  id            String   @id @default(uuid())
  key           String   @unique
  title         String
  content       String
  
  isPublished   Boolean  @default(true) @map("is_published")
  
  lastUpdatedBy String?  @map("last_updated_by")
  updatedAt     DateTime @updatedAt @map("updated_at")
  
  @@map("content_pages")
}